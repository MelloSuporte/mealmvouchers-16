version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - app-network
    restart: always
    volumes:
      - ./src:/app/src
    environment:
      - TZ=America/Sao_Paulo
    command: >
      /bin/sh -c "
      echo 'ðŸš€ Frontend is running at http://localhost';
      nginx -g 'daemon off;'"

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_USER=voucher
      - DB_PASSWORD=Postgres*voucher
      - DB_NAME=sis_voucher
      - JWT_SECRET=${JWT_SECRET}
      - PORT=5000
      - TZ=America/Sao_Paulo
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - ./postgres-backups:/app/postgres-backups
      - ./src:/app/src
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    command: ["bun", "run", "src/server.js"]

  db:
    image: postgres:15-alpine
    container_name: bd_voucher
    platform: linux/x86_64
    environment:
      - POSTGRES_PASSWORD=Postgres*voucher
      - POSTGRES_USER=voucher
      - POSTGRES_DB=sis_voucher
      - TZ=America/Sao_Paulo
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres-backups:/var/lib/postgresql/backups
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voucher -d sis_voucher"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    name: postgres_data

networks:
  app-network:
    driver: bridge
